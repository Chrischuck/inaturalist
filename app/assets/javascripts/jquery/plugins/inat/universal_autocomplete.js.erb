$.fn.universalAutocomplete = function( options ) {
  options = options || { };
  options.appendTo = options.appendTo || "#inat-universal-autocomplete"
  var field = this;

  field.template = function( item ) {
    var wrapperDiv = $( "<div/>" ).addClass( "ac" ).attr( "id", item.type + "-" + item.record.id );
    var itemUrl;
    var obsUrl;
    var itemText;
    var acThumb;
    switch ( item.type ) {
      case "Taxon":
        itemUrl = "/taxa/" + item.record.id;
        if ( item.record.default_photo ) {
          acThumb = $( "<img />" ).attr( "src", item.record.default_photo.square_url );
        } else {
          acThumb = $( "<i></i>" ).addClass( "icon-iconic-" + ( item.record.iconic_taxon_name || "unknown" ).toLowerCase() );
        }
        itemText = $( "<span></span>" ).addClass( "taxon" ).addClass( item.record.rank );
        var scinameWithRank = item.record.name;
        if ( item.record.rank_level > 10 ) {
          scinameWithRank = "<span class='rank'>" + item.record.rank + "</span> " + item.record.name;
        }
        if ( item.record.preferred_common_name ) {
          itemText.addClass( "has-com-name" );
          itemText.append( $( "<span>" ).addClass( "display-name" ).html( iNatModels.Taxon.titleCaseName( item.record.preferred_common_name ) ) );
          itemText.append( " " );
          itemText.append( $( "<span>" ).addClass( "secondary-name" ).addClass( "sciname" ).html( scinameWithRank ) );
        } else {
          itemText.append( $( "<span>" ).addClass( "display-name" ).addClass( "sciname" ).html( scinameWithRank ) );
        }
        break;
      case "Place":
        itemUrl = "/places/" + item.record.slug;
        obsUrl = "/observations?place_id=" + item.record.id;
        acThumb = $( "<i></i>" ).addClass( "fa fa-map-marker" );
        itemText = item.record.display_name || item.record.name;
        switch ( item.record.place_type ) {
          <%- Place::PLACE_TYPES.each do |type, name| -%>
          case <%= type %>:
            itemText += " <span class='secondary-name'>" + I18n.t( '<%= name.parameterize.underscore %>', { defaultValue: '<%= name %>' } ) + "</span>";
            break;
          <% end %>
          default:
            I18n.t( "place" );
        }
        break;
      case "Project":
        itemUrl = "/projects/" + item.record.slug;
        obsUrl = "/observations?project_id=" + item.record.id;
        if ( item.record.icon ) {
          acThumb = $( "<img />" ).attr( "src", item.record.icon );
        } else {
          acThumb = $( "<i/>" ).addClass( "fa fa-briefcase" );
        }
        itemText = item.record.title;
        break;
      case "User":
        itemUrl = "/people/" + item.record.login;
        obsUrl = "/observations?user_id=" + item.record.login;
        if ( item.record.icon_url ) {
          acThumb = $( "<img />" ).attr( "src", item.record.icon_url.replace( /medium\./, "thumb." ) ).addClass( "usericon" );
        } else {
          acThumb = $( "<i/>" ).addClass( "icon-person" );
        }
        itemText = item.record.login;
        if ( item.record.name ) {
          itemText += " <span class='secondary-name'>" + item.record.name + "</span>";
        }
        break;
    }
    wrapperDiv.append( $( "<div/>" ).addClass( "ac-thumb" ).append( acThumb ) );
    var labelDiv = $( "<div/>" ).addClass( "ac-label" );
    labelDiv.append( itemText ); //.append( " (" + I18n.t( item.type.toString().toLowerCase() ) + ")" );
    wrapperDiv.append( labelDiv );
    wrapperDiv.append(
      $("<a></a>")
        .attr( "href", obsUrl )
        .addClass( "ac-view" )
        .addClass( "view-observations" )
        .html( "<span>" + I18n.t( "view_observations") + "</span>" )
    );
    wrapperDiv.append(
      $("<a></a>")
        .attr( "href", itemUrl )
        .addClass( "ac-view" )
        .html( I18n.t( "about") )
    );
    return wrapperDiv;
  };

  field.genericAutocomplete( _.extend( options, {
    source: function( request, response ) {
      $.ajax({
        url: "<%= CONFIG.node_api_url %>/search",
        dataType: "json",
        cache: true,
        data: {
          q: request.term,
          sources: options.sources
        },
        success: function( data ) {
          response( data.results );
        }
      });
    },
    select: function( e, ui ) {
      console.log( "[DEBUG] fired select, e: ", e, ", ui: ", ui );
      // var url;
      // if ( e.ctrlKey || e.altKey || e.metaKey ) {
      //   switch ( ui.item.type ) {
      //     case "Taxon":
      //       url = "/taxa/"+ui.item.record.id;
      //       break;
      //     case "Place":
      //       url = "/places/"+ui.item.record.id;
      //       break;
      //     case "Project":
      //       url = "/projects/" + ( ui.item.record.slug || ui.item.record.slug.id );
      //       break;
      //     case "User":
      //       url = "/people/"+ui.item.record.login;
      //       break;
      //   }
      // } else {
      //   url = "/observations?";
      //   switch ( ui.item.type ) {
      //     case "Taxon":
      //       url += "taxon_id="+ui.item.record.id;
      //       break;
      //     case "Place":
      //       url += "place_id="+ui.item.record.id;
      //       break;
      //     case "Project":
      //       url += "projects="+ui.item.record.id;
      //       break;
      //     case "User":
      //       url += "user_id="+ui.item.record.login;
      //       break;
      //   }
      // }
      // window.location = url;
      var param;
      var val;
      switch ( ui.item.type ) {
        case "Taxon":
          param = "taxon_id="+ui.item.record.id;
          val = ui.item.record.preferred_common_name || ui.item.record.name;
          break;
        case "Place":
          param = "place_id="+ui.item.record.id;
          val = ui.item.record.name;
          break;
        case "Project":
          param = "projects="+ui.item.record.id;
          val = ui.item.record.title;
          break;
        case "User":
          param = "user_id="+ui.item.record.login;
          val = ui.item.record.login;
          break;
      }
      $( e.target ).data( "param", param );
      setTimeout( function( ) {
        $( e.target ).val( val );
      }, 100 );
    }
  } ) );
};
